# frozen_string_literal: true

module ElevenlabsClient
  module Endpoints
    module AgentsPlatform
      class KnowledgeBase
        def initialize(client)
          @client = client
        end

        # GET /v1/convai/knowledge-base
        # Get a list of available knowledge base documents
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/list
        #
        # @param options [Hash] Query parameters
        # @option options [Integer] :page_size How many documents to return at maximum (1-100, default: 30)
        # @option options [String] :search Filter documents whose names start with this string
        # @option options [Boolean] :show_only_owned_documents Return only documents owned by you (default: false)
        # @option options [Array<String>] :types Filter by document types ("file", "url", "text")
        # @option options [String] :sort_direction Sort direction ("asc" or "desc")
        # @option options [String] :sort_by Sort field ("name", "created_at", "updated_at", "size")
        # @option options [Boolean] :use_typesense Use typesense DB for search (deprecated, default: false)
        # @option options [String] :cursor Used for fetching next page
        # @return [Hash] List of knowledge base documents with pagination info
        def list(**options)
          endpoint = "/v1/convai/knowledge-base"
          query_params = options.compact
          
          if query_params.any?
            query_string = URI.encode_www_form(query_params)
            endpoint = "#{endpoint}?#{query_string}"
          end
          
          @client.get(endpoint)
        end

        # GET /v1/convai/knowledge-base/{documentation_id}
        # Get details about a specific documentation making up the agent's knowledge base
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/get
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @param agent_id [String] Optional agent ID for context
        # @return [Hash] Knowledge base document details
        def get(documentation_id, agent_id: nil)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}"
          
          if agent_id
            endpoint = "#{endpoint}?agent_id=#{agent_id}"
          end
          
          @client.get(endpoint)
        end

        # PATCH /v1/convai/knowledge-base/{documentation_id}
        # Update the name of a document
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/update
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @param name [String] A custom, human-readable name for the document
        # @return [Hash] Updated knowledge base document details
        def update(documentation_id, name:)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}"
          request_body = { name: name }
          @client.patch(endpoint, request_body)
        end

        # DELETE /v1/convai/knowledge-base/{documentation_id}
        # Delete a document from the knowledge base
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/delete
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @param force [Boolean] Delete regardless of agent dependencies (default: false)
        # @return [Hash] Empty response on success
        def delete(documentation_id, force: false)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}"
          
          if force
            endpoint = "#{endpoint}?force=true"
          end
          
          @client.delete(endpoint)
        end

        # POST /v1/convai/knowledge-base/url
        # Create a knowledge base document generated by scraping the given webpage
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/create-url
        #
        # @param url [String] URL to a page of documentation
        # @param name [String] Optional custom name for the document
        # @return [Hash] Created document with ID and name
        def create_from_url(url, name: nil)
          endpoint = "/v1/convai/knowledge-base/url"
          request_body = { url: url }
          request_body[:name] = name if name
          @client.post(endpoint, request_body)
        end

        # POST /v1/convai/knowledge-base/text
        # Create a knowledge base document containing the provided text
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/create-text
        #
        # @param text [String] Text content to be added to the knowledge base
        # @param name [String] Optional custom name for the document
        # @return [Hash] Created document with ID and name
        def create_from_text(text, name: nil)
          endpoint = "/v1/convai/knowledge-base/text"
          request_body = { text: text }
          request_body[:name] = name if name
          @client.post(endpoint, request_body)
        end

        # POST /v1/convai/knowledge-base/file
        # Create a knowledge base document generated from the uploaded file
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/create-file
        #
        # @param file_io [IO] File IO object to upload
        # @param filename [String] Original filename
        # @param name [String] Optional custom name for the document
        # @return [Hash] Created document with ID and name
        def create_from_file(file_io:, filename:, name: nil)
          endpoint = "/v1/convai/knowledge-base/file"
          
          payload = {
            "file" => @client.file_part(file_io, filename)
          }
          payload["name"] = name if name
          
          @client.post_multipart(endpoint, payload)
        end

        # POST /v1/convai/knowledge-base/{documentation_id}/rag-index
        # Trigger or get status of RAG indexing for a document
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/compute-rag-index
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @param model [String] RAG model to use ("e5_mistral_7b_instruct" or "multilingual_e5_large_instruct")
        # @return [Hash] RAG index status and progress
        def compute_rag_index(documentation_id, model:)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}/rag-index"
          request_body = { model: model }
          @client.post(endpoint, request_body)
        end

        # GET /v1/convai/knowledge-base/{documentation_id}/rag-index
        # Get information about all RAG indexes of the specified document
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/get-rag-index
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @return [Hash] List of RAG indexes for the document
        def get_rag_index(documentation_id)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}/rag-index"
          @client.get(endpoint)
        end

        # DELETE /v1/convai/knowledge-base/{documentation_id}/rag-index/{rag_index_id}
        # Delete RAG index for the knowledge base document
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/delete-rag-index
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @param rag_index_id [String] The id of RAG index of document
        # @return [Hash] Deleted RAG index information
        def delete_rag_index(documentation_id, rag_index_id)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}/rag-index/#{rag_index_id}"
          @client.delete(endpoint)
        end

        # GET /v1/convai/knowledge-base/rag-index
        # Get total size and other information of RAG indexes used by knowledge base documents
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/get-rag-index-overview
        #
        # @return [Hash] RAG index overview with usage statistics
        def get_rag_index_overview
          endpoint = "/v1/convai/knowledge-base/rag-index"
          @client.get(endpoint)
        end

        # GET /v1/convai/knowledge-base/{documentation_id}/dependent-agents
        # Get a list of agents depending on this knowledge base document
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/get-dependent-agents
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @param options [Hash] Query parameters
        # @option options [String] :cursor Used for fetching next page
        # @option options [Integer] :page_size How many agents to return at maximum (1-100, default: 30)
        # @return [Hash] List of dependent agents with pagination info
        def get_dependent_agents(documentation_id, **options)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}/dependent-agents"
          query_params = options.compact
          
          if query_params.any?
            query_string = URI.encode_www_form(query_params)
            endpoint = "#{endpoint}?#{query_string}"
          end
          
          @client.get(endpoint)
        end

        # GET /v1/convai/knowledge-base/{documentation_id}/content
        # Get the entire content of a document from the knowledge base
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/get-content
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @return [String] Streaming document content
        def get_content(documentation_id)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}/content"
          @client.get(endpoint)
        end

        # GET /v1/convai/knowledge-base/{documentation_id}/chunk/{chunk_id}
        # Get details about a specific documentation part used by RAG
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/get-chunk
        #
        # @param documentation_id [String] The id of a document from the knowledge base
        # @param chunk_id [String] The id of a document RAG chunk
        # @return [Hash] Chunk details with ID, name, and content
        def get_chunk(documentation_id, chunk_id)
          endpoint = "/v1/convai/knowledge-base/#{documentation_id}/chunk/#{chunk_id}"
          @client.get(endpoint)
        end

        # GET /v1/convai/agent/{agent_id}/knowledge-base/size
        # Returns the number of pages in the agent's knowledge base
        # Documentation: https://elevenlabs.io/docs/api-reference/convai/knowledge-base/get-size
        #
        # @param agent_id [String] The agent ID
        # @return [Hash] Knowledge base size information
        def get_agent_knowledge_base_size(agent_id)
          endpoint = "/v1/convai/agent/#{agent_id}/knowledge-base/size"
          @client.get(endpoint)
        end
      end
    end
  end
end
